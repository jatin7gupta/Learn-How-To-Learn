{
  "posts": [
    {
      "id": 1,
      "title": "json-server",
      "author": "typicode"
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "postId": 1
    }
  ],
  "profile": {
    "name": "typicode"
  },
  "blogs": [
    {
      "author": "Zat Rana",
      "title": " $3 a Week to Becoming the CEO of a Prestigious Firm",
      "date": "Mon Nov 13 2017 15:21:02 GMT+0530 (India Standard Time)",
      "logo": "https://cdn-images-1.medium.com/max/2000/1*4zJloxk16LBslV0JHqOfpQ.jpeg",
      "category": "Technology",
      "votes": 9,
      "content": "There are few institutions in the world that evoke as strong of a reaction as Goldman Sachs.\nTo the broader public, their name is synonymous with Wall Street and the mortgage crisis that led to the great recession of 2007–2008. The prestige that was previously associated with their brand become the vehicle of recognition that later brought on widespread criticism.\nThere was, however, a time in history when they weren’t the giants that they are today. In fact, in the early 20th century, they were a mid-tier trading firm with a quiet reputation.\nThe name Sidney Weinberg may not ring too many bells today, but in his time, he was a man that commanded great respect. Fortune Magazine called him the “Director’s Director,” and he’s credited with being the force that turned a struggling bank into a lasting institution.\nWeinberg has a classic rags-to-riches story. He began his foray into the world of finance as a janitor’s assistant making $3 a week. He left at the top.\nRegardless of how you feel about Goldman Sachs, there is quite an interesting story here, and it sheds insight into the process behind breakout results",
      "id": 1
    },
    {
      "author": "Steven Heidel",
      "title": "Practical Functional Programming 2",
      "date": "Mon Nov 13 2017 16:09:55 GMT+0530 (India Standard Time)",
      "logo": "https://cdn-images-1.medium.com/max/1200/1*Xlh39YelzppTwLNIoqVL0Q.jpeg",
      "category": "Entrepreneurship",
      "votes": 1,
      "content": "The following is reformatted from a presentation I gave at LinkedIn last year.\nThe presentation attempted to explain functional programming without using concepts like “monads” or “immutability” or “side effects”. Instead it focuses on how thinking about composition can make you a better programmer, regardless of what language you use.\n40 years ago, on October 17th, 1977, the Turing Award was presented to John Backus for his contribution to the design of high-level programming systems, most notably the Fortran programming language. All Turing Award winners are given the opportunity to present a lecture on a topic of their choice during the year in which they receive the award. As the creator of the Fortran programming language, one may have expected Backus to lecture on the benefits of Fortran and future developments in the language. Instead, he gave a lecture entitled Can programming be liberated from the Von Neumann style? in which he criticized some of the mainstream languages of the day, including Fortran, for their shortcomings. He also proposed an alternative: a functional style of programming.\n\nThe lecture contrasts conventional programs and their “inability to effectively use powerful combining forms” with functional programs which are “founded on the use of combining forms.” Functional programming has received renewed interest in the past several years due to the rise of highly scalable and parallel computing. But the main benefit of functional programming is one that can be realized regardless of if your program is going to be parallelized or not: functional programming is better at composition.\nComposition is the ability to assemble complex behavior by aggregating simple pieces. In computer science classes much emphasis is put on abstraction: taking a large problem and splitting it up into tractable pieces. Less emphasis is put on the reverse: once you have the small pieces implemented then how do you connect them together. It seems that some functions and systems are easy to connect together whereas others are much messier. But we need to take a step back and ask: what properties of these functions and systems make them easy to compose? What properties make them hard to compose? After you’ve read through enough code the pattern starts to emerge, and this pattern is the key to understanding functional programming.\n",
      "id": 2
    }
  ]
}